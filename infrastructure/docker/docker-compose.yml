version: "3.9"

services:
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supersecurepassword}
      POSTGRES_DB: lastmile_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - lastmile_network

    ssl_exporter:
    image: ribbybibby/ssl-exporter:v2.3.1
    container_name: ssl_exporter
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9219:9219"
    command:
      - --targets=https://lastmile-delivery-pro.com
      - --probe.timeout=10s

# -----------------------------------------------------
  # PROMETHEUS (Metrics Collection)
  # -----------------------------------------------------
  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: prometheus
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus

  # -----------------------------------------------------
  # ALERTMANAGER (Slack + Email)
  # -----------------------------------------------------
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager

  # -----------------------------------------------------
  # NODE EXPORTER (Host Metrics)
  # -----------------------------------------------------
  node_exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node_exporter
    restart: unless-stopped
    pid: "host"
    network_mode: host
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave

  # -----------------------------------------------------
  # POSTGRES EXPORTER
  # -----------------------------------------------------
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres_exporter
    restart: unless-stopped
    networks:
      - monitoring
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable"

  # -----------------------------------------------------
  # REDIS EXPORTER
  # -----------------------------------------------------
  redis_exporter:
    image: oliver006/redis_exporter:v1.61.0
    container_name: redis_exporter
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis:6379

  # -----------------------------------------------------
  # CELERY FLOWER (Queue & Task Monitoring)
  # -----------------------------------------------------
  flower:
    image: mher/flower:2.0.1
    container_name: flower
    restart: unless-stopped
    networks:
      - monitoring
      - backend
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: "redis://redis:6379/0"
      FLOWER_BASIC_AUTH: "${FLOWER_USER}:${FLOWER_PASSWORD}"

  # -----------------------------------------------------
  # GRAFANA (Visualization)
  # -----------------------------------------------------
  grafana:
    image: grafana/grafana:11.2.2
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://monitor.lastmile-delivery-pro.com
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana

  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica
    restart: always
    environment:
      POSTGRES_USER: replica
      POSTGRES_PASSWORD: ${POSTGRES_REPLICA_PASSWORD:-replicapass}
    depends_on:
      - postgres-primary
    command: >
      bash -c "until pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U admin -vP -W;
               do sleep 5; done"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - lastmile_network

  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    networks:
      - lastmile_network

  redis-sentinel:
    image: bitnami/redis-sentinel:7.2
    container_name: redis-sentinel
    restart: always
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD:-redispass}
    depends_on:
      - redis-master
    networks:
      - lastmile_network

  nginx:
    image: nginx:latest
    container_name: nginx-gateway
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - certbot_etc:/etc/letsencrypt
      - certbot_var:/var/lib/letsencrypt
      - webroot:/var/www/certbot
    depends_on:
      - identity-service
      - tenant-service
      - order-service
      - tracking-service
    networks:
      - lastmile_network

  certbot:
    build:
      context: ./infrastructure/docker
      dockerfile: Dockerfile.certbot
    container_name: certbot
    volumes:
      - ./infrastructure/docker/nginx/ssl:/etc/letsencrypt
      - ./infrastructure/docker/nginx/ssl-data:/var/lib/letsencrypt
      - ./infrastructure/docker/nginx/certbot:/var/www/certbot
      - ./infrastructure/scripts:/usr/src/app/infrastructure/scripts
    entrypoint: ["/bin/bash", "-c", "/usr/src/app/infrastructure/scripts/cron-setup.sh && cron -f"]
    restart: unless-stopped
    networks:
      - backend

  identity-service:
    image: ghcr.io/lastmile/identity-service:latest
    restart: always
    env_file: .env
    depends_on:
      - postgres-primary
      - redis-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 5
    networks:
      - lastmile_network

  tenant-service:
    image: ghcr.io/lastmile/tenant-service:latest
    restart: always
    env_file: .env
    depends_on:
      - postgres-primary
    networks:
      - lastmile_network

  order-service:
    image: ghcr.io/lastmile/order-service:latest
    restart: always
    env_file: .env
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - lastmile_network

  dispatch-service:
    image: ghcr.io/lastmile/dispatch-service:latest
    restart: always
    env_file: .env
    depends_on:
      - order-service
    networks:
      - lastmile_network

  tracking-service:
    image: ghcr.io/lastmile/tracking-service:latest
    restart: always
    env_file: .env
    networks:
      - lastmile_network

  notification-service:
    image: ghcr.io/lastmile/notification-service:latest
    restart: always
    env_file: .env
    depends_on:
      - redis-master
    networks:
      - lastmile_network

  payment-service:
    image: ghcr.io/lastmile/payment-service:latest
    restart: always
    env_file: .env
    networks:
      - lastmile_network

  analytics-service:
    image: ghcr.io/lastmile/analytics-service:latest
    restart: always
    env_file: .env
    depends_on:
      - postgres-primary
    networks:
      - lastmile_network

  celery-worker:
    image: ghcr.io/lastmile/celery-worker:latest
    restart: always
    env_file: .env
    depends_on:
      - redis-master
      - postgres-primary
    networks:
      - lastmile_network

  celery-beat:
    image: ghcr.io/lastmile/celery-beat:latest
    restart: always
    env_file: .env
    depends_on:
      - celery-worker
    networks:
      - lastmile_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - lastmile_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana123}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - lastmile_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - lastmile_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - lastmile_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - lastmile_network

volumes:
  postgres_data:
  postgres_replica_data:
  redis_data:
  es_data:
  certbot_etc:
  certbot_var:
  webroot:

networks:
  lastmile_network:
    driver: bridge
